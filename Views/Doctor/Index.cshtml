@model IEnumerable<MVCDocterPatientSystem.Models.PatientInfo>

@{
    ViewBag.Title = "Patients List";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patients List</title>

    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.4/css/jquery.dataTables.min.css">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
</head>
<body>
    <div class="container mt-5">

        <h2>Patients List</h2>
        <table id="patientsTable" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Date of Birth</th>
                    <th>History</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var patient in Model)
                {
                    <tr>
                        @*<td>@Html.HiddenFor(modelItem => patient.Id)</td>*@
                        <td>@Html.DisplayFor(modelItem => patient.FirstName)</td>
                        <td>@Html.DisplayFor(modelItem => patient.LastName)</td>
                        <td>@Html.DisplayFor(modelItem => patient.DateOfBirth)</td>
                        <td>@Html.DisplayFor(modelItem => patient.History)</td>

                        <td>
                            <button class="btn btn-sm btn-primary block-unblock-btn" data-user-id="@patient.UserId" data-action="@((patient.ApplicationUser.IsBlocked ? "Unblock" : "Block"))">
                                @(patient.ApplicationUser.IsBlocked ? "Unblock" : "Block")
                            </button>
                        </td>

                        @*<td>
                                @Html.ActionLink(patient.ApplicationUser.IsBlocked ? "Unblock" : "Block", "BlockUnblockPatient", new { id = patient.UserId }, new { @class = "btn btn-sm btn-primary" })
                            </td>*@
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/1.11.4/js/jquery.dataTables.min.js"></script>
    <!-- Bootstrap JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        //$(document).ready(function () {
        //    $('#patientsTable').DataTable({
        //        "paging": true, // Enable pagination
        //        "ordering": true, // Enable ordering
        //        "searching": true, // Enable search box
        //        "responsive": true // Enable responsive design
        //    });
        //});

          $(document).ready(function () {
            $('#patientsTable').DataTable({
                "paging": true, // Enable pagination
                "ordering": true, // Enable ordering
                "searching": true, // Enable search box
                "responsive": true // Enable responsive design
                //"order": [[0, "desc"]] 
            });

            // Event delegation for block/unblock buttons
            $(document).on('click', '.block-unblock-btn', function () {
                var userId = $(this).data('user-id');
                var action = $(this).data('action');
                var button = $(this);

                Swal.fire({
                    title: `Are you sure you want to ${action.toLowerCase()} this patient?`,
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: `Yes, ${action.toLowerCase()}!`
                }).then((result) => {
                    if (result.isConfirmed) {
                        // AJAX call to block/unblock the patient
                        $.ajax({
                            url: '@Url.Action("BlockUnblockPatient", "Doctor")',
                            type: 'POST',
                            data: { id: userId, action: action },
                            success: function(response) {
                                Swal.fire(
                                    'Done!',
                                    `The patient has been ${action.toLowerCase()}ed.`,
                                    'success'
                                ).then(() => {
                                    // Update button text and action
                                    if (action === "Block") {
                                        button.data('action', 'Unblock');
                                        button.text('Unblock');
                                    } else {
                                        button.data('action', 'Block');
                                        button.text('Block');
                                    }
                                });
                            },
                            error: function() {
                                Swal.fire(
                                    'Error!',
                                    'There was an error processing your request.',
                                    'error'
                                );
                            }
                        });
                    }
                });
            });
        });

    </script>
</body>
</html>
